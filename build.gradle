import com.gradle.publish.LoginTask
import com.gradle.publish.PublishTask

import static java.lang.System.*

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.8.20"
    id "com.adarshr.test-logger" version "3.2.0"
    id "org.jlleitschuh.gradle.ktlint" version "11.3.1"
    id "com.gradle.plugin-publish" version "1.2.0"
    id "com.gtramontina.ghooks.gradle" version "1.1.1"
    id "java-gradle-plugin"
}

group = "com.gtramontina.ghooks.gradle"
compileKotlin { kotlinOptions.jvmTarget = "11" }
compileTestKotlin { kotlinOptions.jvmTarget = "11" }
repositories { mavenCentral() }
dependencies {
    implementation(group: "org.jetbrains.kotlin", name: "kotlin-stdlib-jdk8", version: "1.8.20")
    implementation(group: "commons-io", name: "commons-io", version: "2.7")
    testImplementation(group: "io.kotlintest", name: "kotlintest-runner-junit5", version: "3.4.2")
    testImplementation(group: "org.junit.jupiter", name: "junit-jupiter-api", version: "5.9.2")
    testImplementation(group: "org.awaitility", name: "awaitility", version: "4.2.0")
    testRuntimeOnly(group: "org.junit.platform", name: "junit-platform-launcher", version: "1.9.2")
    testRuntimeOnly(group: "org.junit.jupiter", name: "junit-jupiter-engine", version: "5.9.2")
}

test { useJUnitPlatform() }

// Plugin Definition ---------------------------------------------------------------------------------------------------

gradlePlugin {
    website = "https://github.com/gtramontina/ghooks.gradle"
    vcsUrl = "https://github.com/gtramontina/ghooks.gradle"

    plugins {
        create(rootProject.name.toString()) {
            id = group.toString()
            displayName = "ghooks"
            description = "Simple Git hooks"
            implementationClass = "com.gtramontina.ghooks.GHooks"
            tags.set(["gradle", "plugin", "git", "hook", "ghook", "ghooks", "versioned"])
        }
    }
}

// Plugin Publishing Custom Tasks --------------------------------------------------------------------------------------

tasks.create("checkPublishCredentials") {
    group = "plugin portal"
    description = "Checks if your environment has the publishing credentials properly setup."

    def key = getProperty("gradle.publish.key", getenv("GRADLE_PUBLISH_KEY"))
    def secret = getProperty("gradle.publish.secret", getenv("GRADLE_PUBLISH_SECRET"))
    doLast {
        if (!key?.trim()) throw new GradleException("Could not find either the system property 'gradle.publish.key' or the environment variable 'GRADLE_PUBLISH_KEY'")
        if (!secret?.trim()) throw new GradleException("Could not find either the system property 'gradle.publish.secret' or the environment variable 'GRADLE_PUBLISH_SECRET'")
        setProperty("gradle.publish.key", key)
        setProperty("gradle.publish.secret", secret)
    }
}

tasks.withType(LoginTask) { enabled = false }
tasks.withType(PublishTask) { dependsOn("checkPublishCredentials") }
